
fn receive_average_lat_pl (mut channel: Channel, title: &String, command: &String) -> (Result<(), Box<dyn Error>>, f32, f32) {
    fn report_process_ssh_terminal(buffer: &mut [u8; 4096]) -> (Vec<f32>){
        let mut latency: Vec<f32> = Vec::new();
        let mut reader = BufReader::new(Cursor::new(&mut buffer[..]));
        loop {
            let mut line = String::new();
            if let Ok(bytes_read) = reader.read_line(&mut line) {
                if bytes_read == 0 {
                    break;
                }
            } else {
                eprintln!("Error reading from stdout");
                break;
            }       
            // Header line
            if line.contains("SEQ HOST") {
                continue;
            }
            // Averages line
            else if line.contains("avg-rtt=") && line.contains("packet-loss=") {
                continue;
            }
            // Ping value line
            else if line.trim().ends_with(&['m', 's', 'u', 's'][..]) {
                let combined_value = parse_latency_value(&line);
                latency.push(combined_value);
            }
            // Handle errors
            else if line.contains("could not...") || line.contains("packet-loss=100%") || line.contains("timeout") {
                latency.push(9999.0);
            }
            // Unknown line
            else {
                latency.push(9999.0);
            }
            if latency.len() != 0 {
                return latency;
            }
        }
        latency   
    } 
    
    //Start fn receive_average_lat_pl()
    
    let mut latency:Vec<f32> = Vec::new();
    let mut _latency_average:f32 = 0.0;
    let mut _packet_loss:f32 = 0.0;
    // Open a channel and execute the command0480
    let _channel: Result<(), ssh2::Error> = channel.exec(command);    
    let mut buffer = [0; 4096];
    let mut line_number = 1;
    //let mut iteration = 0;
    let mut iteration_clean_screen = 0;
    let var_name = Ok(loop {
        let len = channel.read(&mut buffer);
        let latency_result = process_ssh_terminal(&mut buffer);
        latency.extend(latency_result);
        if latency.len() >= 100 {
            _packet_loss = calculate_packet_loss(&latency);
            _latency_average = calculate_average_latency(&latency);
            break;
        }
        //Clean buffer
        buffer = [0; 4096];
    });
    
   (var_name, _latency_average, _packet_loss)
}

fn option_5( list_ip: Vec<String>, username: &str, password: &str){

    fn ask_to_router(username: &str, password: &str, address: &String, title: &String, destination_address: String,source_address: String ) ->  (Result<(), Box<dyn Error>> ,f32 ,f32 ){
                   
        let command = format!("ping {} src-address={}", destination_address, source_address);

        let session = establish_ssh_connection(&address, username, password)
            .map_err(|err| {
                // Wrap the error in a custom std::io::Error
                io::Error::new(io::ErrorKind::Other, format!("No fue posible conectarse al router: {} \n\n{}",address, err))
            });

        let channel: Result<Channel, ssh2::Error> = session.expect("No fue posible establecer el canal").channel_session();
        let (_result, _latency, _packet_loss_percentage) = receive_average_lat_pl(channel.expect("No fue posible establecer el canal"),  &title, &command);
        
        //let custom_error_message = "No fue posible conectarse al router";
        //io::Error::new(io::ErrorKind::Other, custom_error_message)
        (_result, _latency, _packet_loss_percentage)
    }

    fn loop_fn(list_ip: Vec<String>, position: usize, username: &str, password: &str) -> (Result<(), Box<dyn Error>>, f32 ,f32 ){

        let _title: String = list_ip[position].clone();
        let _destination_address: String = list_ip[position +1].clone();
        let _source_address: String = list_ip[position +2].clone();
        let _host: String = list_ip[position +3].clone();
        let _port: String = "22".to_string();
        let _address = format!("{}:{}", _host, _port).to_string();
        let password = password.clone().to_string();
        let (_result, _latency, _packet_loss_percentage) = ask_to_router(&_address, username, &password,  &_title, _destination_address, _source_address);

        (_result, _latency, _packet_loss_percentage)
    }

    fn run(list_ip: Vec<String>, username: &str, password: &str){
        //proveedores
        let _result1;
        let _latency_prov_1;
        let _packet_loss_percentage_prov_1;

        let handle1 = thread::spawn(|| {
            // Function 1
            if let Err(err) = ((_result1,_latency_prov_1, _packet_loss_percentage_prov_1) = loop_fn(list_ip, 0, username, password)){
                eprintln!("Error in thread: {}", err);
            }
                   
            Ok(())
        });

        let _result2;
        let _latency_prov_2;
        let _packet_loss_percentage_prov_2;

        let handle2 = thread::spawn(|| {
            // Function 1
        (_result2, _latency_prov_2, _packet_loss_percentage_prov_2) = loop_fn(list_ip, 4, username, password);
        Ok(())
            
        });

        // Wait for all threads to finish
        match handle1.join().unwrap() {
            Ok(_) => println!("Thread completed successfully"),
            Err(err) => eprintln!("Thread encountered an error: {}", err),
        }
        match handle2.join().unwrap() {
            Ok(_) => println!("Thread completed successfully"),
            Err(err) => eprintln!("Thread encountered an error: {}", err),
        }

    }

    run(list_ip);
}